/* Generated by Yosys 0.45+139 (git sha1 4d581a97d, x86_64-w64-mingw32-g++ 13.2.1 -O3) */

(* top =  1  *)
(* src = "SAR_LOGIC.v:2.1-44.10" *)
module controller(clk, go, valid, result, sample, value, cmp);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  (* src = "SAR_LOGIC.v:3.11-3.14" *)
  input clk;
  wire clk;
  (* src = "SAR_LOGIC.v:9.11-9.14" *)
  input cmp;
  wire cmp;
  (* src = "SAR_LOGIC.v:4.11-4.13" *)
  input go;
  wire go;
  (* src = "SAR_LOGIC.v:11.15-11.19" *)
  wire [7:0] mask;
  (* src = "SAR_LOGIC.v:6.18-6.24" *)
  output [7:0] result;
  wire [7:0] result;
  (* src = "SAR_LOGIC.v:7.12-7.18" *)
  output sample;
  wire sample;
  (* onehot = 32'd1 *)
  wire [3:0] state;
  (* src = "SAR_LOGIC.v:5.12-5.17" *)
  output valid;
  wire valid;
  (* src = "SAR_LOGIC.v:8.18-8.23" *)
  output [7:0] value;
  wire [7:0] value;
  NOT _084_ (
    .A(state[1]),
    .Y(_050_)
  );
  NOT _085_ (
    .A(mask[7]),
    .Y(_051_)
  );
  NOT _086_ (
    .A(mask[6]),
    .Y(_052_)
  );
  NOT _087_ (
    .A(mask[5]),
    .Y(_053_)
  );
  NOT _088_ (
    .A(mask[4]),
    .Y(_054_)
  );
  NOT _089_ (
    .A(mask[3]),
    .Y(_055_)
  );
  NOT _090_ (
    .A(mask[2]),
    .Y(_056_)
  );
  NOT _091_ (
    .A(mask[1]),
    .Y(_057_)
  );
  NOT _092_ (
    .A(go),
    .Y(_001_)
  );
  NOT _093_ (
    .A(cmp),
    .Y(_058_)
  );
  NOT _094_ (
    .A(mask[0]),
    .Y(_059_)
  );
  NOT _095_ (
    .A(result[0]),
    .Y(_060_)
  );
  NOT _096_ (
    .A(result[1]),
    .Y(_061_)
  );
  NOT _097_ (
    .A(result[2]),
    .Y(_062_)
  );
  NOT _098_ (
    .A(result[3]),
    .Y(_063_)
  );
  NOT _099_ (
    .A(result[4]),
    .Y(_064_)
  );
  NOT _100_ (
    .A(result[5]),
    .Y(_065_)
  );
  NOT _101_ (
    .A(result[6]),
    .Y(_066_)
  );
  NOT _102_ (
    .A(result[7]),
    .Y(_067_)
  );
  NAND _103_ (
    .A(_051_),
    .B(_067_),
    .Y(value[7])
  );
  NAND _104_ (
    .A(_052_),
    .B(_066_),
    .Y(value[6])
  );
  NAND _105_ (
    .A(_053_),
    .B(_065_),
    .Y(value[5])
  );
  NAND _106_ (
    .A(_054_),
    .B(_064_),
    .Y(value[4])
  );
  NAND _107_ (
    .A(_055_),
    .B(_063_),
    .Y(value[3])
  );
  NAND _108_ (
    .A(_056_),
    .B(_062_),
    .Y(value[2])
  );
  NAND _109_ (
    .A(_057_),
    .B(_061_),
    .Y(value[1])
  );
  NAND _110_ (
    .A(_059_),
    .B(_060_),
    .Y(value[0])
  );
  NOR _111_ (
    .A(state[1]),
    .B(sample),
    .Y(_068_)
  );
  NOT _112_ (
    .A(_068_),
    .Y(_069_)
  );
  NOR _113_ (
    .A(_001_),
    .B(_068_),
    .Y(_070_)
  );
  NAND _114_ (
    .A(go),
    .B(_069_),
    .Y(_071_)
  );
  NOR _115_ (
    .A(sample),
    .B(_059_),
    .Y(_072_)
  );
  NOR _116_ (
    .A(_071_),
    .B(_072_),
    .Y(_002_)
  );
  NAND _117_ (
    .A(state[1]),
    .B(mask[0]),
    .Y(_073_)
  );
  NOT _118_ (
    .A(_073_),
    .Y(_074_)
  );
  NOR _119_ (
    .A(valid),
    .B(_074_),
    .Y(_075_)
  );
  NOR _120_ (
    .A(_001_),
    .B(_075_),
    .Y(_003_)
  );
  NAND _121_ (
    .A(go),
    .B(state[0]),
    .Y(_076_)
  );
  NOT _122_ (
    .A(_076_),
    .Y(_000_)
  );
  NOR _123_ (
    .A(_050_),
    .B(_001_),
    .Y(_077_)
  );
  NAND _124_ (
    .A(state[1]),
    .B(go),
    .Y(_078_)
  );
  NOR _125_ (
    .A(mask[7]),
    .B(_070_),
    .Y(_079_)
  );
  NOR _126_ (
    .A(_077_),
    .B(_079_),
    .Y(_004_)
  );
  NAND _127_ (
    .A(mask[0]),
    .B(_071_),
    .Y(_080_)
  );
  NAND _128_ (
    .A(mask[1]),
    .B(_077_),
    .Y(_081_)
  );
  NAND _129_ (
    .A(_080_),
    .B(_081_),
    .Y(_005_)
  );
  NAND _130_ (
    .A(mask[1]),
    .B(_071_),
    .Y(_082_)
  );
  NAND _131_ (
    .A(mask[2]),
    .B(_077_),
    .Y(_083_)
  );
  NAND _132_ (
    .A(_082_),
    .B(_083_),
    .Y(_006_)
  );
  NAND _133_ (
    .A(mask[2]),
    .B(_071_),
    .Y(_020_)
  );
  NAND _134_ (
    .A(mask[3]),
    .B(_077_),
    .Y(_021_)
  );
  NAND _135_ (
    .A(_020_),
    .B(_021_),
    .Y(_007_)
  );
  NAND _136_ (
    .A(mask[3]),
    .B(_071_),
    .Y(_022_)
  );
  NAND _137_ (
    .A(mask[4]),
    .B(_077_),
    .Y(_023_)
  );
  NAND _138_ (
    .A(_022_),
    .B(_023_),
    .Y(_008_)
  );
  NAND _139_ (
    .A(mask[4]),
    .B(_071_),
    .Y(_024_)
  );
  NAND _140_ (
    .A(mask[5]),
    .B(_077_),
    .Y(_025_)
  );
  NAND _141_ (
    .A(_024_),
    .B(_025_),
    .Y(_009_)
  );
  NAND _142_ (
    .A(mask[5]),
    .B(_071_),
    .Y(_026_)
  );
  NAND _143_ (
    .A(mask[6]),
    .B(_077_),
    .Y(_027_)
  );
  NAND _144_ (
    .A(_026_),
    .B(_027_),
    .Y(_010_)
  );
  NAND _145_ (
    .A(mask[6]),
    .B(_071_),
    .Y(_028_)
  );
  NAND _146_ (
    .A(mask[7]),
    .B(_077_),
    .Y(_029_)
  );
  NAND _147_ (
    .A(_028_),
    .B(_029_),
    .Y(_011_)
  );
  NOR _148_ (
    .A(_050_),
    .B(cmp),
    .Y(_030_)
  );
  NAND _149_ (
    .A(state[1]),
    .B(_058_),
    .Y(_031_)
  );
  NAND _150_ (
    .A(_070_),
    .B(_031_),
    .Y(_032_)
  );
  NAND _151_ (
    .A(result[0]),
    .B(_032_),
    .Y(_033_)
  );
  NOR _152_ (
    .A(_078_),
    .B(_030_),
    .Y(_034_)
  );
  NAND _153_ (
    .A(value[0]),
    .B(_034_),
    .Y(_035_)
  );
  NAND _154_ (
    .A(_033_),
    .B(_035_),
    .Y(_012_)
  );
  NAND _155_ (
    .A(result[1]),
    .B(_032_),
    .Y(_036_)
  );
  NAND _156_ (
    .A(value[1]),
    .B(_034_),
    .Y(_037_)
  );
  NAND _157_ (
    .A(_036_),
    .B(_037_),
    .Y(_013_)
  );
  NAND _158_ (
    .A(result[2]),
    .B(_032_),
    .Y(_038_)
  );
  NAND _159_ (
    .A(value[2]),
    .B(_034_),
    .Y(_039_)
  );
  NAND _160_ (
    .A(_038_),
    .B(_039_),
    .Y(_014_)
  );
  NAND _161_ (
    .A(result[3]),
    .B(_032_),
    .Y(_040_)
  );
  NAND _162_ (
    .A(value[3]),
    .B(_034_),
    .Y(_041_)
  );
  NAND _163_ (
    .A(_040_),
    .B(_041_),
    .Y(_015_)
  );
  NAND _164_ (
    .A(result[4]),
    .B(_032_),
    .Y(_042_)
  );
  NAND _165_ (
    .A(value[4]),
    .B(_034_),
    .Y(_043_)
  );
  NAND _166_ (
    .A(_042_),
    .B(_043_),
    .Y(_016_)
  );
  NAND _167_ (
    .A(result[5]),
    .B(_032_),
    .Y(_044_)
  );
  NAND _168_ (
    .A(value[5]),
    .B(_034_),
    .Y(_045_)
  );
  NAND _169_ (
    .A(_044_),
    .B(_045_),
    .Y(_017_)
  );
  NAND _170_ (
    .A(result[6]),
    .B(_032_),
    .Y(_046_)
  );
  NAND _171_ (
    .A(value[6]),
    .B(_034_),
    .Y(_047_)
  );
  NAND _172_ (
    .A(_046_),
    .B(_047_),
    .Y(_018_)
  );
  NAND _173_ (
    .A(result[7]),
    .B(_032_),
    .Y(_048_)
  );
  NAND _174_ (
    .A(value[7]),
    .B(_034_),
    .Y(_049_)
  );
  NAND _175_ (
    .A(_048_),
    .B(_049_),
    .Y(_019_)
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _176_ (
    .C(clk),
    .D(_004_),
    .Q(mask[7])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _177_ (
    .C(clk),
    .D(_005_),
    .Q(mask[0])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _178_ (
    .C(clk),
    .D(_006_),
    .Q(mask[1])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _179_ (
    .C(clk),
    .D(_007_),
    .Q(mask[2])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _180_ (
    .C(clk),
    .D(_008_),
    .Q(mask[3])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _181_ (
    .C(clk),
    .D(_009_),
    .Q(mask[4])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _182_ (
    .C(clk),
    .D(_010_),
    .Q(mask[5])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _183_ (
    .C(clk),
    .D(_011_),
    .Q(mask[6])
  );
  DFF _184_ (
    .C(clk),
    .D(_001_),
    .Q(state[0])
  );
  DFF _185_ (
    .C(clk),
    .D(_002_),
    .Q(state[1])
  );
  DFF _186_ (
    .C(clk),
    .D(_000_),
    .Q(sample)
  );
  DFF _187_ (
    .C(clk),
    .D(_003_),
    .Q(valid)
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _188_ (
    .C(clk),
    .D(_012_),
    .Q(result[0])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _189_ (
    .C(clk),
    .D(_013_),
    .Q(result[1])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _190_ (
    .C(clk),
    .D(_014_),
    .Q(result[2])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _191_ (
    .C(clk),
    .D(_015_),
    .Q(result[3])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _192_ (
    .C(clk),
    .D(_016_),
    .Q(result[4])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _193_ (
    .C(clk),
    .D(_017_),
    .Q(result[5])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _194_ (
    .C(clk),
    .D(_018_),
    .Q(result[6])
  );
  (* src = "SAR_LOGIC.v:18.5-39.8" *)
  DFF _195_ (
    .C(clk),
    .D(_019_),
    .Q(result[7])
  );
  assign state[3:2] = { valid, sample };
endmodule
